/*
 * The MIT License
 *
 * AlQuraan
 *
 * Copyright 2015 Ibbtek <http://ibbtek.altervista.org/>.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package com.ibbtek.alquraan;

import com.ibbtek.listeners.ListListener;
import com.ibbtek.listeners.TreeListener;
import com.ibbtek.search.SearchQuran;
import com.ibbtek.utilities.Config;
import com.ibbtek.utilities.CopyPaste;
import com.ibbtek.utilities.FileHandler;
import static com.ibbtek.utilities.LogToFile.log;
import com.ibbtek.utilities.MenuScroller;
import com.ibbtek.utilities.SerialTree;
import java.awt.ComponentOrientation;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.net.URISyntaxException;
import java.util.Arrays;
import javax.swing.Action;
import javax.swing.ButtonGroup;
import javax.swing.ImageIcon;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.KeyStroke;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.text.DefaultEditorKit;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;

/**
 * @version 1.3
 * @author Ibbtek <http://ibbtek.altervista.org/>
 */
public class MainGui extends javax.swing.JFrame {

    public static String transliteration;
    public static String appPath;
    public static String trans;
    public static String quran;

    /**
     * Creates new form MainGui
     *
     * @param word
     */
    public MainGui(String word) {
        /*
         Set the appPath
         Uncomment the '+"/classes"' part in developpment
         and comment it before building your project to production use.
         */
        try {
            MainGui.appPath = new File(getClass().getProtectionDomain().
                    getCodeSource().getLocation().toURI().getPath()).
                    getParentFile().getPath() 
//                    +"/classes"         //Comment or uncomment this line
                    ;
        } catch (URISyntaxException ex) {
            log(ex, "severe", "Can't get application path");
        }
        /*
         get config
         */
        Config.loadConfig();
        initComponents();
        myInit();
        //        selectQuran(1,1);
        searchField.setText(word);
        SearchQuran tQuran = new SearchQuran(word, quranTable, quranTree);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        searchField = new javax.swing.JTextField();
        searchBT = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jSplitPane2 = new javax.swing.JSplitPane();
        quranSplitPane = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        quranTree = new javax.swing.JTree();
        jScrollPane2 = new javax.swing.JScrollPane();
        quranTextPane = new javax.swing.JTextPane();
        jScrollPane6 = new javax.swing.JScrollPane();
        quranTable = new javax.swing.JTable();
        jButtonBack = new javax.swing.JButton();
        jButtonForward = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuFile = new javax.swing.JMenu();
        jMenuItemExit = new javax.swing.JMenuItem();
        jMenuEdit = new javax.swing.JMenu();
        jMenuTrans = new javax.swing.JMenu();
        jMenuAbout = new javax.swing.JMenu();
        jMenuItemHelp = new javax.swing.JMenuItem();
        jMenuItemAbout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("AlQuraan");

        searchField.setFont(new java.awt.Font("Arial", 1, 19)); // NOI18N

        searchBT.setIcon(new javax.swing.ImageIcon(getClass().getResource("/data/images/viewmag.png"))); // NOI18N
        searchBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBTActionPerformed(evt);
            }
        });

        jSplitPane2.setDividerSize(5);
        jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane2.setResizeWeight(0.7);

        quranSplitPane.setDividerSize(5);
        quranSplitPane.setResizeWeight(0.15);

        jScrollPane1.setAutoscrolls(true);

        quranTree.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        jScrollPane1.setViewportView(quranTree);

        quranSplitPane.setLeftComponent(jScrollPane1);

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        quranTextPane.setEditable(false);
        quranTextPane.setContentType("text/html"); // NOI18N
        quranTextPane.setFont(new java.awt.Font("Arial", 0, 19)); // NOI18N
        quranTextPane.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jScrollPane2.setViewportView(quranTextPane);

        quranSplitPane.setRightComponent(jScrollPane2);

        jSplitPane2.setLeftComponent(quranSplitPane);

        quranTable.setFont(new java.awt.Font("Arial", 0, 17)); // NOI18N
        quranTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Text", "Sura", "Aya"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        quranTable.setToolTipText("");
        quranTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);
        quranTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        quranTable.setOpaque(false);
        quranTable.setRowHeight(27);
        jScrollPane6.setViewportView(quranTable);

        jSplitPane2.setRightComponent(jScrollPane6);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 932, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jSplitPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 578, Short.MAX_VALUE))
        );

        jButtonBack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/data/images/back.png"))); // NOI18N
        jButtonBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBackActionPerformed(evt);
            }
        });

        jButtonForward.setIcon(new javax.swing.ImageIcon(getClass().getResource("/data/images/forward.png"))); // NOI18N
        jButtonForward.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonForwardActionPerformed(evt);
            }
        });

        jMenuFile.setText("File");

        jMenuItemExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/data/images/cross.png"))); // NOI18N
        jMenuItemExit.setText("Exit");
        jMenuItemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemExitActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemExit);

        jMenuBar1.add(jMenuFile);

        jMenuEdit.setText("Edit");
        jMenuBar1.add(jMenuEdit);

        jMenuTrans.setText("Translations");
        jMenuBar1.add(jMenuTrans);

        jMenuAbout.setText("About");

        jMenuItemHelp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/data/images/help.png"))); // NOI18N
        jMenuItemHelp.setText("Help");
        jMenuItemHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemHelpActionPerformed(evt);
            }
        });
        jMenuAbout.add(jMenuItemHelp);

        jMenuItemAbout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/data/images/information.png"))); // NOI18N
        jMenuItemAbout.setText("About");
        jMenuItemAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAboutActionPerformed(evt);
            }
        });
        jMenuAbout.add(jMenuItemAbout);

        jMenuBar1.add(jMenuAbout);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(searchField)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchBT)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonBack)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonForward)
                .addContainerGap())
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(searchBT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonBack, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonForward, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItemExitActionPerformed

    private void jMenuItemHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemHelpActionPerformed
        FileHandler page = new FileHandler();
        page.openURL("/data/help/HELP.html");
    }//GEN-LAST:event_jMenuItemHelpActionPerformed

    private void jMenuItemAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAboutActionPerformed
        new AboutGui().setVisible(true);
    }//GEN-LAST:event_jMenuItemAboutActionPerformed

    private void searchBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBTActionPerformed
        SearchQuran tQuran = new SearchQuran(
                searchField.getText(), quranTable, quranTree);
    }//GEN-LAST:event_searchBTActionPerformed

    private void jButtonBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBackActionPerformed
        int[] previous = quranTree.getSelectionRows();
        if (previous[0] - 4 >= 0) {
            quranTree.setSelectionRow(previous[0] - 4);
            quranTree.scrollPathToVisible(quranTree.getSelectionPath());
        }
    }//GEN-LAST:event_jButtonBackActionPerformed

    private void jButtonForwardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonForwardActionPerformed
        int[] next = quranTree.getSelectionRows();
        if (next[0] + 4 < quranTree.getRowCount()) {
            quranTree.setSelectionRow(next[0] + 4);
            quranTree.scrollPathToVisible(quranTree.getSelectionPath());
        }
    }//GEN-LAST:event_jButtonForwardActionPerformed
    /**
     * selectQuran Method Select th node of the QuranTree by giving the sura and
     * aya number
     *
     * @param sura
     * @param aya
     */
    private void selectQuran(int sura, int aya) {
        quranTable.getSelectionModel().addListSelectionListener(
                new ListListener(quranTable, quranTree));

        TreeNode rootNode = (TreeNode) quranTree.getModel().getRoot();
        TreePath path = new TreePath(rootNode);
        path = path.pathByAddingChild(
                rootNode.getChildAt(sura - 1));
        quranTree.expandPath(path);
        quranTree.setSelectionPath(path);
        path = path.pathByAddingChild(
                rootNode.getChildAt(sura - 1).getChildAt(aya - 1));
        quranTree.expandPath(path);
        quranTree.setSelectionPath(path);
        quranTree.scrollPathToVisible(path);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(final String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {

                try {
                    if (args.length == 0) {
                        new MainGui("بِسْمِ اللَّهِ").setVisible(true);
                    } else {
                        String words = "";
                        for (String arg : args) {
                            words += arg + " ";
                        }
                        new MainGui(words).setVisible(true);
                    }
                } catch (Exception ex) {
                    log(ex, "warning", "Problem with the arguments");
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonBack;
    private javax.swing.JButton jButtonForward;
    private javax.swing.JMenu jMenuAbout;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenuEdit;
    private javax.swing.JMenu jMenuFile;
    private javax.swing.JMenuItem jMenuItemAbout;
    private javax.swing.JMenuItem jMenuItemExit;
    private javax.swing.JMenuItem jMenuItemHelp;
    private javax.swing.JMenu jMenuTrans;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JSplitPane quranSplitPane;
    private javax.swing.JTable quranTable;
    private javax.swing.JTextPane quranTextPane;
    private javax.swing.JTree quranTree;
    private javax.swing.JButton searchBT;
    private javax.swing.JTextField searchField;
    // End of variables declaration//GEN-END:variables

    /**
     * myInit Method Add some initialization to the default initComponent
     */
    private void myInit() {
        /*
         Set all trees model
         */
        String internalURL = new FileHandler().
                getInternalURL("/data/quran/quranTree.data");
        quranTree.setModel(new SerialTree(internalURL).getDtModel());
        /*
         Initialize the components
         */

        addTransMenu();
        /*
         Add copy/paste context menu add jMenuItem
         */
        Toolkit.getDefaultToolkit().getSystemEventQueue().push(new CopyPaste());
        addCopyPaste();
        /*
         Add TreeSelectionListener to quranTree
         */
        quranTree.addTreeSelectionListener(
                new TreeListener(quranTextPane));
        /*
         Set the icon image of the frame
         */
        this.setIconImage(new ImageIcon(getClass().
                getResource("/data/images/quran.png")).getImage());
        /*
         Add an ActionListener to the searchField to launch search
         by pressing ENTER button
         */
        searchField.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                SearchQuran tQuran = new SearchQuran(
                        searchField.getText(), quranTable, quranTree);
            }
        });
        /*
         set quranTable orientation to RIGHT_TO_LEFT
         */
        searchField.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
        quranTable.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(DefaultTableCellRenderer.CENTER);
        /*
         Center quranTable Cell
         */
        quranTable.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
        quranTable.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);
        quranTable.getColumnModel().getColumn(2).setCellRenderer(centerRenderer);
        /*
         Set fix MAX & MIN width of qurantTable column
         */
        quranTable.getColumnModel().getColumn(1).setMaxWidth(100);
        quranTable.getColumnModel().getColumn(1).setMinWidth(100);
        quranTable.getColumnModel().getColumn(2).setMaxWidth(100);
        quranTable.getColumnModel().getColumn(2).setMinWidth(100);

        quranTable.getSelectionModel().addListSelectionListener(
                new ListListener(quranTable, quranTree));

        /*
         Create temporary files
         */
        quran = new FileHandler().getInternalURL("/data/quran/Arabic-(Original-Book)-1.xml");
        transliteration = new FileHandler().getInternalURL("/data/quran/English-Transliteration.xml");

    }

    private void addCopyPaste() {
        /*
         Add copy/paste in edit menu
         */
        Action cutAction = new DefaultEditorKit.CutAction();
        cutAction.putValue(Action.NAME, "Cut");
        cutAction.putValue(Action.ACCELERATOR_KEY,
                KeyStroke.getKeyStroke("ctrl X"));
        cutAction.putValue(Action.SMALL_ICON,
                new javax.swing.ImageIcon(getClass().
                        getResource("/data/images/cut.png")));
        jMenuEdit.add(cutAction);

        Action copyAction = new DefaultEditorKit.CopyAction();
        copyAction.putValue(Action.NAME, "Copy");
        copyAction.putValue(Action.ACCELERATOR_KEY,
                KeyStroke.getKeyStroke("ctrl C"));
        copyAction.putValue(Action.SMALL_ICON,
                new javax.swing.ImageIcon(getClass().
                        getResource("/data/images/copy.png")));
        jMenuEdit.add(copyAction);

        Action pasteAction = new DefaultEditorKit.PasteAction();
        pasteAction.putValue(Action.NAME, "Paste");
        pasteAction.putValue(Action.ACCELERATOR_KEY,
                KeyStroke.getKeyStroke("ctrl V"));
        pasteAction.putValue(Action.SMALL_ICON,
                new javax.swing.ImageIcon(getClass().
                        getResource("/data/images/paste.png")));
        jMenuEdit.add(pasteAction);
    }

    /**
     * addTransMenu Method Add a translations menu a all it's item from the
     * data/quran/trans folder
     */
    private void addTransMenu() {
        File folder = new File(appPath + "/data/trans/");
        File[] listOfFiles = folder.listFiles();
        Arrays.sort(listOfFiles);
        ButtonGroup group = new ButtonGroup();
        JRadioButtonMenuItem rb;
        ImageIcon ico;
        for (final File fileEntry : listOfFiles) {
            String full = fileEntry.getName();
            String lang = full.substring(0, full.indexOf('-')).toLowerCase();
            String name = full.substring(0, full.lastIndexOf('.'));

            try {
                ico = new javax.swing.ImageIcon(getClass().
                        getResource("/data/images/flags/" + lang + ".png"));
            } catch (Exception ex) {
                ico = new javax.swing.ImageIcon(getClass().
                        getResource("/data/images/flags/other.png"));
            }
            if (name.equals(MainGui.trans)) {
                rb = new JRadioButtonMenuItem(
                        name,
                        ico,
                        true);
            } else {
                rb = new JRadioButtonMenuItem(
                        name,
                        ico,
                        false);
            }
            group.add(rb);
            rb.addActionListener(new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent ae) {
                    JRadioButtonMenuItem button = (JRadioButtonMenuItem) ae.getSource();
                    MainGui.trans = button.getText();
                    Config.saveConfig();
                    int[] current = quranTree.getSelectionRows();
                    quranTree.removeSelectionRow(current[0]);
                    quranTree.setSelectionRow(current[0]);
                }
            });
            jMenuTrans.add(rb);
        }
        MenuScroller.setScrollerFor(jMenuTrans);
    }
}
